//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UmBristol.PageStateIcons.Config
{
    
    
    /// <summary>
    /// The PageStateIconsConfigurationSection Configuration Section.
    /// </summary>
    public partial class PageStateIconsConfigurationSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the PageStateIconsConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PageStateIconsConfigurationSectionSectionName = "pageStateIconsConfigurationSection";
        
        /// <summary>
        /// Gets the PageStateIconsConfigurationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::UmBristol.PageStateIcons.Config.PageStateIconsConfigurationSection Instance
        {
            get
            {
                return ((global::UmBristol.PageStateIcons.Config.PageStateIconsConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::UmBristol.PageStateIcons.Config.PageStateIconsConfigurationSection.PageStateIconsConfigurationSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::UmBristol.PageStateIcons.Config.PageStateIconsConfigurationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::UmBristol.PageStateIcons.Config.PageStateIconsConfigurationSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Rules Property
        /// <summary>
        /// The XML name of the <see cref="Rules"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string RulesPropertyName = "rules";
        
        /// <summary>
        /// Gets or sets the Rules.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Rules.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::UmBristol.PageStateIcons.Config.PageStateIconsConfigurationSection.RulesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::UmBristol.PageStateIcons.Config.RulesCollection Rules
        {
            get
            {
                return ((global::UmBristol.PageStateIcons.Config.RulesCollection)(base[global::UmBristol.PageStateIcons.Config.PageStateIconsConfigurationSection.RulesPropertyName]));
            }
            set
            {
                base[global::UmBristol.PageStateIcons.Config.PageStateIconsConfigurationSection.RulesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace UmBristol.PageStateIcons.Config
{
    
    
    /// <summary>
    /// A collection of RuleElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::UmBristol.PageStateIcons.Config.RuleElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::UmBristol.PageStateIcons.Config.RulesCollection.RuleElementPropertyName)]
    public partial class RulesCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string RuleElementPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::UmBristol.PageStateIcons.Config.RulesCollection.RuleElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::UmBristol.PageStateIcons.Config.RulesCollection.RuleElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::UmBristol.PageStateIcons.Config.RuleElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::UmBristol.PageStateIcons.Config.RuleElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::UmBristol.PageStateIcons.Config.RuleElement this[int index]
        {
            get
            {
                return ((global::UmBristol.PageStateIcons.Config.RuleElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::UmBristol.PageStateIcons.Config.RuleElement this[object name]
        {
            get
            {
                return ((global::UmBristol.PageStateIcons.Config.RuleElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::UmBristol.PageStateIcons.Config.RuleElement add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::UmBristol.PageStateIcons.Config.RuleElement add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::UmBristol.PageStateIcons.Config.RuleElement GetItemAt(int index)
        {
            return ((global::UmBristol.PageStateIcons.Config.RuleElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::UmBristol.PageStateIcons.Config.RuleElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::UmBristol.PageStateIcons.Config.RuleElement GetItemByKey(string name)
        {
            return ((global::UmBristol.PageStateIcons.Config.RuleElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace UmBristol.PageStateIcons.Config
{
    
    
    /// <summary>
    /// The RuleElement Configuration Element.
    /// </summary>
    public partial class RuleElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::UmBristol.PageStateIcons.Config.RuleElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::UmBristol.PageStateIcons.Config.RuleElement.NamePropertyName]));
            }
            set
            {
                base[global::UmBristol.PageStateIcons.Config.RuleElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region XPath Property
        /// <summary>
        /// The XML name of the <see cref="XPath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XPathPropertyName = "xPath";
        
        /// <summary>
        /// Gets or sets the XPath.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The XPath.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::UmBristol.PageStateIcons.Config.RuleElement.XPathPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string XPath
        {
            get
            {
                return ((string)(base[global::UmBristol.PageStateIcons.Config.RuleElement.XPathPropertyName]));
            }
            set
            {
                base[global::UmBristol.PageStateIcons.Config.RuleElement.XPathPropertyName] = value;
            }
        }
        #endregion
        
        #region IconPath Property
        /// <summary>
        /// The XML name of the <see cref="IconPath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string IconPathPropertyName = "iconPath";
        
        /// <summary>
        /// Gets or sets the IconPath.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The IconPath.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::UmBristol.PageStateIcons.Config.RuleElement.IconPathPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string IconPath
        {
            get
            {
                return ((string)(base[global::UmBristol.PageStateIcons.Config.RuleElement.IconPathPropertyName]));
            }
            set
            {
                base[global::UmBristol.PageStateIcons.Config.RuleElement.IconPathPropertyName] = value;
            }
        }
        #endregion
        
        #region CssClass Property
        /// <summary>
        /// The XML name of the <see cref="CssClass"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CssClassPropertyName = "cssClass";
        
        /// <summary>
        /// Gets or sets the CssClass.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The CssClass.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::UmBristol.PageStateIcons.Config.RuleElement.CssClassPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string CssClass
        {
            get
            {
                return ((string)(base[global::UmBristol.PageStateIcons.Config.RuleElement.CssClassPropertyName]));
            }
            set
            {
                base[global::UmBristol.PageStateIcons.Config.RuleElement.CssClassPropertyName] = value;
            }
        }
        #endregion
        
        #region OverlayIconPath Property
        /// <summary>
        /// The XML name of the <see cref="OverlayIconPath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string OverlayIconPathPropertyName = "overlayIconPath";
        
        /// <summary>
        /// Gets or sets the OverlayIconPath.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The OverlayIconPath.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::UmBristol.PageStateIcons.Config.RuleElement.OverlayIconPathPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string OverlayIconPath
        {
            get
            {
                return ((string)(base[global::UmBristol.PageStateIcons.Config.RuleElement.OverlayIconPathPropertyName]));
            }
            set
            {
                base[global::UmBristol.PageStateIcons.Config.RuleElement.OverlayIconPathPropertyName] = value;
            }
        }
        #endregion
        
        #region Description Property
        /// <summary>
        /// The XML name of the <see cref="Description"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DescriptionPropertyName = "description";
        
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Description.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::UmBristol.PageStateIcons.Config.RuleElement.DescriptionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Description
        {
            get
            {
                return ((string)(base[global::UmBristol.PageStateIcons.Config.RuleElement.DescriptionPropertyName]));
            }
            set
            {
                base[global::UmBristol.PageStateIcons.Config.RuleElement.DescriptionPropertyName] = value;
            }
        }
        #endregion
    }
}
